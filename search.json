[
  {
    "objectID": "erie.html",
    "href": "erie.html",
    "title": "Lake Erie Watershed Analysis",
    "section": "",
    "text": "Back in the fall of 2020, I register for a program at Hope College called Day1: Watershed, a year-long program that offered the opportunity to engage in the efforts of Hope’s local community to improve the water quality of the greater Holland area and larger Lake Michigan ecological systems. While I originally took it because I was interested in scientific research, that program catalyzed my love of Data Analytics.\nAs the research is ongoing and owned by Hope College, I cannot provide the work that I did back then. However, here is a taste of the analyses we conducted using the Lake Erie dataset provided by Michelle Barry."
  },
  {
    "objectID": "erie.html#lake-erie-unconstrained-ordination",
    "href": "erie.html#lake-erie-unconstrained-ordination",
    "title": "Lake Erie Watershed Analysis",
    "section": "Lake Erie: Unconstrained Ordination",
    "text": "Lake Erie: Unconstrained Ordination\nMultivariable data is often hard to work with. In order to understand relationships in the data we need to summarize the variability in a way that reduces the dimensionality of the data. Historical there are several different ordination methods that have been applied to ecological data. For this project we are using unconstrained ordination. We start with an abundance matrix with samples along one dimension (rows) and species (or other taxonomic classification) along the the other (columns). Two samples are similar if they have similar species compositions. That information is then used by the unconstrained ordination to order samples along the ordination axes. We will use two unconstrained ordination methods for this analysis: Principal Coordinate Analysis (PCoA) and Non-metric Multidimensional Scaling (NMDS).\n\nSetup and Importing\n\nrm(list = ls())\ngc()\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(vegan)\nlibrary(ape)\n\nerie &lt;- readRDS(\"erie_data/erie.rds\")\nerie_meta &lt;- readRDS(\"erie_data/erie_meta.rds\")\nerie_tax &lt;- readRDS(\"erie_data/erie_tax.rds\")\n\n\n\nRemove Small Samples\n\nerie_meta &lt;- erie_meta |&gt; filter(sequencingDepth &gt;= 10000)\n\nerie_samples &lt;- erie_meta |&gt; pluck(\"SampleID\")\n\nerie &lt;- erie |&gt; filter(SampleID |&gt; is.element(erie_samples))\n\n\n\nCompute and Remove Low Relative Abundances\n\n# Pivot the data and group by SampleID\nerie &lt;- erie |&gt;\n        pivot_longer(cols = starts_with(\"Otu\"),\n                     names_to = \"OTU\",\n                     values_to = \"Abundance\") |&gt;\n        group_by(SampleID)\n\n# Calculate the relative abundances and filter out all rows with a relative abundance less than or equal to 0.005%\nerie &lt;- erie |&gt;\n        mutate(Rel_Abundance = Abundance / sum(Abundance)) |&gt;\n        filter(Rel_Abundance &gt; 5e-5)\n\n# Ensure that we drop any OTUs in the taxonomy table which are no longer present in the erie table\nerie_tax &lt;- erie_tax |&gt; semi_join(erie, by = \"OTU\")\n\n# Repivot the data back to original wide format\nerie &lt;- erie |&gt;\n        ungroup() |&gt;\n        select(-c(Abundance)) |&gt;\n        pivot_wider(names_from = \"OTU\",\n                    values_from = \"Rel_Abundance\",\n                    values_fill = 0)\n\n\n\nThe Community Matrix\n\nerie_rownames &lt;- erie |&gt; pluck(\"SampleID\")\n\nerie_matrix &lt;- erie |&gt;\n               select(starts_with(\"OTU\")) |&gt;\n               as.matrix() |&gt;\n               `rownames&lt;-`(erie_rownames)\n\n\n\nThe PCoA Calculation\n\n# Calculate distances with the bray method\nerie_dist &lt;- erie_matrix |&gt; vegdist(method = \"bray\")\n\n# Perform the PCoA\nerie_pcoa &lt;- erie_dist |&gt; pcoa()\n\n# Convert from matrix to tibble\nerie_pcoa_tib &lt;- erie_pcoa %&gt;%\n                 pluck(\"vectors\") %&gt;%\n                 .[,1:2] %&gt;%\n                 as_tibble(rownames = \"SampleID\") %&gt;%\n                 rename(pcoa.1 = Axis.1,\n                        pcoa.2 = Axis.2)\n\n# Join the PCoA tibble to the meta data\nerie_meta &lt;- left_join(erie_meta, erie_pcoa_tib)\n\n\n\nThe NMDS Calculation\n\n# Seed the number generator for consistency and reuse the matrix from earlier for the calculation\nset.seed(02052001)\nerie_nmds &lt;- erie_dist |&gt;\n             metaMDS(trymax = 200, sfgrmin = 1e-9, sratmax = 0.999999999)\n\n# Convert from matrix to tibble\nerie_nmds_tib &lt;- erie_nmds |&gt;\n                 pluck(\"points\") |&gt;\n                 as_tibble(rownames = \"SampleID\") |&gt;\n                 rename(nmds.1 = MDS1,\n                        nmds.2 = MDS2)\n\n# Join the NMDS tibble to the meta data\nerie_meta &lt;- left_join(erie_meta, erie_nmds_tib)\n\n\n\nPlotting the Data\n\n# Ensure months are ordered correctly for the plot using factors\nerie_meta &lt;- erie_meta |&gt;\n             mutate(Month = factor(\n               Month,\n               levels = c(\"June\", \"July\", \"August\", \"September\", \"October\")))\n\n# Create the PCoA plot\nggplot(data = erie_meta,\n       mapping = aes(x = pcoa.1, y = pcoa.2, color = Month, shape = Station)) +\n  scale_color_manual(values = c(\"#a65628\", \"red\", \"#ffae19\", \"#4daf4a\",\n                                \"#1919ff\", \"darkorchid3\", \"magenta\")) +\n  geom_point(aes(color = Month), alpha = 0.7, size = 4) +\n  geom_point(colour = \"grey90\", size = 1.5) +\n  theme_bw() +\n  labs(title = \"PCoA\")\n# Create the NMDS plot\nggplot(data = erie_meta,\n       mapping = aes(x = nmds.1, y = nmds.2, color = Month, shape = Station)) +\nscale_color_manual(values = c(\"#a65628\", \"red\", \"#ffae19\", \"#4daf4a\",\n                              \"#1919ff\", \"darkorchid3\", \"magenta\")) +\n  geom_point(aes(color = Month), alpha = 0.7, size = 4) +\n  geom_point(colour = \"grey90\", size = 1.5) +\n  theme_bw() +\n  labs(title = \"NMDS\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat do the PCoA and NMDS plots tell us?\n\nPCoA\nThe PCoA plot shows a low species variation across stations for the June and July months, while the other months are more spread out and diverse. September and August appear to overlap the most in species abundances, while October’s abundances are the most separate from the other months. Which station as sample was taken at seems to have a much smaller affect on species similarity than the month. For October, the stations show the most separation from each other.\n\n\nNMDS\nThe NMDS plot shows a similar picture to the PCoA, though the June and July samples are more densely concentrated with the exception of one July outlier. Why the July nearshore1 sample is so far removed from the other July samples is worth investigating. Again, August and September show the most species similarities, while October has the least overlap with other months.\n\n\nFindings\nThe plots suggest there is little change in species composition in the June and July months, but throughout August and September we see a greater variation in species abundances and similarities. October shows the least species similarity with the other months, likely due to changing seasons and colder weather affecting the composition of bacteria in the water."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Haniah Kring",
    "section": "",
    "text": "Hi! I am a senior pursuing a B.S. in Computer Science at Hope College. A quick learner, detail-oriented, and a problem-solver at heart, I am especially interested in Data Analytics and I am actively seeking opportunities related to the same.\nTake a look around my projects, maybe you will find something of interest."
  },
  {
    "objectID": "tableclothr.html",
    "href": "tableclothr.html",
    "title": "tableclothr",
    "section": "",
    "text": "tableclothr is a package which allows you to easily transform your data into static or dynamic tables. The original version was drafted by Josiah Ringelberg, and I have since grown it into a full fletched package.\n\n\ntableclothr integrates two of the most popular table creation packages together: gt and DT.\n\ngt follows in the footsteps of ggplot2, aiming to be a powerful, yet straightforward way of creating beatiful tables in R\nDT is an R interface for the JavaScript library, DataTables. It’s power comes from the ability to create html tables that allow you to interactively filter, sort, and search your data\n\ntableclothr has one primary function: tablecloth().\nIn gt format:\n\nlibrary(tableclothr)\nlibrary(gt)\n\ntablecloth(gtcars,\n           title = 'Cars Summary',\n           group_col = 'year',\n           rowname_col = 'mfr',\n           aggregate_by = 'median',\n           format = 'static',\n           theme = 'greyscale')\n\n\n\n\n\n\n\n  \n    \n      Cars Summary\n    \n    \n    \n      \n      hp\n      hp_rpm\n      trq\n      trq_rpm\n      mpg_c\n      mpg_h\n      msrp\n    \n  \n  \n    \n      2014\n    \n    Ferrari\n562.00\n9,000.00\n398.00\n6,000.00\n13.00\n17.00\n233,509.00\n    Lamborghini\n550.00\n8,000.00\n398.00\n6,500.00\n12.00\n20.00\n191,900.00\n    \n      2015\n    \n    Audi\n430.00\n7,900.00\n317.00\n4,500.00\n11.00\n20.00\n115,900.00\n    Ferrari\n624.50\n8,625.00\n506.50\n6,000.00\n12.50\n16.50\n293,372.00\n    Lamborghini\n655.00\n8,250.00\n460.00\n6,000.00\n13.50\n19.00\n317,375.00\n    \n      2016\n    \n    Aston Martin\n552.00\n6,650.00\n465.00\n5,500.00\n13.00\n21.00\n205,300.00\n    Audi\n485.00\n5,800.00\n443.50\n1,550.00\n16.00\n26.00\n95,900.00\n    BMW\n425.00\n5,800.00\n420.00\n1,500.00\n17.00\n24.00\n94,100.00\n    Bentley\n500.00\n6,000.00\n487.00\n1,700.00\n15.00\n25.00\n198,500.00\n    Chevrolet\n650.00\n6,400.00\n650.00\n3,600.00\n15.00\n22.00\n88,345.00\n    Ferrari\n661.00\n8,000.00\n561.00\n3,000.00\n15.00\n22.00\n245,400.00\n    Jaguar\n340.00\n6,500.00\n332.00\n3,500.00\n16.00\n24.00\n65,000.00\n    Maserati\n404.00\n5,500.00\n384.00\n1,750.00\n16.00\n23.00\n99,900.00\n    McLaren\n570.00\n7,500.00\n443.00\n5,000.00\n16.00\n23.00\n184,900.00\n    Mercedes-Benz\n416.00\n5,750.00\n416.50\n1,675.00\n18.00\n24.50\n107,475.00\n    Nissan\n545.00\n6,400.00\n436.00\n3,200.00\n16.00\n22.00\n101,770.00\n    Porsche\n330.00\n6,800.00\n291.00\n4,675.00\n19.00\n28.00\n81,200.00\n    Rolls-Royce\n593.50\n5,425.00\n582.50\n1,500.00\n12.50\n20.00\n319,675.00\n    \n      2017\n    \n    Acura\n573.00\n6,500.00\n476.00\n2,000.00\n21.00\n22.00\n156,000.00\n    Aston Martin\n608.00\n6,500.00\n516.00\n1,500.00\n15.00\n21.00\n211,195.00\n    Dodge\n645.00\n5,000.00\n600.00\n5,000.00\n12.00\n19.00\n95,895.00\n    Ferrari\n680.00\n8,250.00\n514.00\n5,750.00\n12.00\n17.00\n298,000.00\n    Ford\n647.00\n6,250.00\n550.00\n5,900.00\n11.00\n18.00\n447,000.00\n    Lotus\n400.00\n7,000.00\n302.00\n3,500.00\n16.00\n24.00\n91,900.00\n    Porsche\n300.00\n6,500.00\n280.00\n1,950.00\n20.50\n28.50\n54,950.00\n    Tesla\n259.00\n6,100.00\n243.00\nNA\nNA\nNA\n74,500.00\n  \n  \n  \n\n\n\n\n\n\nIn DT format:\n\nlibrary(DT)"
  },
  {
    "objectID": "tableclothr.html#core-functionality",
    "href": "tableclothr.html#core-functionality",
    "title": "tableclothr",
    "section": "",
    "text": "tableclothr integrates two of the most popular table creation packages together: gt and DT.\n\ngt follows in the footsteps of ggplot2, aiming to be a powerful, yet straightforward way of creating beatiful tables in R\nDT is an R interface for the JavaScript library, DataTables. It’s power comes from the ability to create html tables that allow you to interactively filter, sort, and search your data\n\ntableclothr has one primary function: tablecloth().\nIn gt format:\n\nlibrary(tableclothr)\nlibrary(gt)\n\ntablecloth(gtcars,\n           title = 'Cars Summary',\n           group_col = 'year',\n           rowname_col = 'mfr',\n           aggregate_by = 'median',\n           format = 'static',\n           theme = 'greyscale')\n\n\n\n\n\n\n\n  \n    \n      Cars Summary\n    \n    \n    \n      \n      hp\n      hp_rpm\n      trq\n      trq_rpm\n      mpg_c\n      mpg_h\n      msrp\n    \n  \n  \n    \n      2014\n    \n    Ferrari\n562.00\n9,000.00\n398.00\n6,000.00\n13.00\n17.00\n233,509.00\n    Lamborghini\n550.00\n8,000.00\n398.00\n6,500.00\n12.00\n20.00\n191,900.00\n    \n      2015\n    \n    Audi\n430.00\n7,900.00\n317.00\n4,500.00\n11.00\n20.00\n115,900.00\n    Ferrari\n624.50\n8,625.00\n506.50\n6,000.00\n12.50\n16.50\n293,372.00\n    Lamborghini\n655.00\n8,250.00\n460.00\n6,000.00\n13.50\n19.00\n317,375.00\n    \n      2016\n    \n    Aston Martin\n552.00\n6,650.00\n465.00\n5,500.00\n13.00\n21.00\n205,300.00\n    Audi\n485.00\n5,800.00\n443.50\n1,550.00\n16.00\n26.00\n95,900.00\n    BMW\n425.00\n5,800.00\n420.00\n1,500.00\n17.00\n24.00\n94,100.00\n    Bentley\n500.00\n6,000.00\n487.00\n1,700.00\n15.00\n25.00\n198,500.00\n    Chevrolet\n650.00\n6,400.00\n650.00\n3,600.00\n15.00\n22.00\n88,345.00\n    Ferrari\n661.00\n8,000.00\n561.00\n3,000.00\n15.00\n22.00\n245,400.00\n    Jaguar\n340.00\n6,500.00\n332.00\n3,500.00\n16.00\n24.00\n65,000.00\n    Maserati\n404.00\n5,500.00\n384.00\n1,750.00\n16.00\n23.00\n99,900.00\n    McLaren\n570.00\n7,500.00\n443.00\n5,000.00\n16.00\n23.00\n184,900.00\n    Mercedes-Benz\n416.00\n5,750.00\n416.50\n1,675.00\n18.00\n24.50\n107,475.00\n    Nissan\n545.00\n6,400.00\n436.00\n3,200.00\n16.00\n22.00\n101,770.00\n    Porsche\n330.00\n6,800.00\n291.00\n4,675.00\n19.00\n28.00\n81,200.00\n    Rolls-Royce\n593.50\n5,425.00\n582.50\n1,500.00\n12.50\n20.00\n319,675.00\n    \n      2017\n    \n    Acura\n573.00\n6,500.00\n476.00\n2,000.00\n21.00\n22.00\n156,000.00\n    Aston Martin\n608.00\n6,500.00\n516.00\n1,500.00\n15.00\n21.00\n211,195.00\n    Dodge\n645.00\n5,000.00\n600.00\n5,000.00\n12.00\n19.00\n95,895.00\n    Ferrari\n680.00\n8,250.00\n514.00\n5,750.00\n12.00\n17.00\n298,000.00\n    Ford\n647.00\n6,250.00\n550.00\n5,900.00\n11.00\n18.00\n447,000.00\n    Lotus\n400.00\n7,000.00\n302.00\n3,500.00\n16.00\n24.00\n91,900.00\n    Porsche\n300.00\n6,500.00\n280.00\n1,950.00\n20.50\n28.50\n54,950.00\n    Tesla\n259.00\n6,100.00\n243.00\nNA\nNA\nNA\n74,500.00\n  \n  \n  \n\n\n\n\n\n\nIn DT format:\n\nlibrary(DT)"
  }
]